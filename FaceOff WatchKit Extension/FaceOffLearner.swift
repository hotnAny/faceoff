//
//  FaceOffLearner.swift
//  FaceOff WatchKit Extension
//
//  Created by Xiang 'Anthony' Chen on 3/24/20.
//  Copyright Â© 2020 Xiang 'Anthony' Chen. All rights reserved.
//

import Foundation

let testdata0: [Float] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]

let testdata1 : [Float] = [-0.050,-0.308,-0.933,-0.139,-0.217,-0.973,-0.223,-0.115,-0.997,-0.201,-0.095,-0.971,-0.154,-0.157,-0.940,-0.155,-0.190,-0.923,-0.176,-0.169,-0.933,-0.168,-0.148,-0.949,-0.149,-0.156,-0.948,-0.143,-0.175,-0.941,-0.155,-0.182,-0.939,-0.162,-0.167,-0.937,-0.164,-0.153,-0.941,-0.166,-0.143,-0.940,-0.170,-0.141,-0.935,-0.177,-0.145,-0.934,-0.181,-0.146,-0.938,-0.179,-0.143,-0.950,-0.174,-0.136,-0.957,-0.174,-0.123,-0.968,-0.179,-0.114,-0.969,-0.187,-0.115,-0.971,-0.189,-0.116,-0.974,-0.184,-0.119,-0.980,-0.179,-0.122,-0.977,-0.184,-0.122,-0.969,-0.194,-0.121,-0.961,-0.209,-0.113,-0.949,-0.220,-0.109,-0.943,-0.226,-0.107,-0.944,-0.223,-0.100,-0.942,-0.222,-0.099,-0.951,-0.219,-0.100,-0.958,-0.214,-0.104,-0.964,-0.208,-0.105,-0.972,-0.209,-0.097,-0.978,-0.217,-0.092,-0.975,-0.224,-0.088,-0.976,-0.224,-0.087,-0.971,-0.216,-0.085,-0.971,-0.212,-0.084,-0.976,-0.208,-0.084,-0.972,-0.204,-0.088,-0.987,-0.196,-0.090,-0.992,-0.188,-0.089,-0.999,-0.194,-0.083,-0.996,-0.200,-0.095,-0.977,-0.204,-0.111,-0.974,-0.198,-0.108,-0.961,-0.191,-0.098,-0.959,-0.184,-0.098,-0.943,-0.174,-0.100,-0.940,-0.167,-0.094,-0.941,-0.158,-0.102,-0.942,-0.142,-0.083,-0.964,-0.125,-0.040,-1.007,-0.116,-0.011,-1.033,-0.121,0.003,-1.039,-0.149,0.015,-1.033,-0.183,0.053,-1.043,-0.202,0.099,-1.054,-0.202,0.134,-1.052,-0.202,0.156,-1.040,-0.214,0.193,-1.029,-0.233,0.228,-0.997,-0.259,0.253,-0.980,-0.293,0.295,-0.961,-0.334,0.366,-0.936,-0.377,0.461,-0.910,-0.420,0.563,-0.877,-0.459,0.655,-0.836,-0.499,0.716,-0.799,-0.536,0.751,-0.743,-0.580,0.765,-0.712,-0.631,0.781,-0.682,-0.672,0.794,-0.660,-0.699,0.801,-0.638,-0.701,0.771,-0.591,-0.699,0.712,-0.542,-0.716,0.683,-0.471,-0.741,0.683,-0.387,-0.754,0.670,-0.325,-0.761,0.642,-0.289,-0.769,0.601,-0.268,-0.788,0.571,-0.242,-0.808,0.566,-0.228,-0.826,0.589,-0.228,-0.833,0.642,-0.255,-0.835,0.649,-0.278,-0.832,0.627,-0.255,-0.842,0.560,-0.247,-0.848,0.509,-0.252,-0.845,0.451,-0.253,-0.839,0.419,-0.238,-0.827,0.388,-0.201,-0.800,0.322,-0.192,-0.761,0.290,-0.172,-0.751,0.283,-0.193,-0.770,0.304,-0.197,-0.782,0.336,-0.185,-0.774,0.317,-0.208,-0.762,0.288,-0.200,-0.753,0.266,-0.177,-0.750,0.228,-0.153,-0.775,0.199,-0.102,-0.814,0.192,-0.069,-0.817,0.176,-0.077,-0.810,0.155,-0.101,-0.805,0.153,-0.109,-0.786,0.145,-0.131,-0.782,0.139,-0.152,-0.794,0.160,-0.148,-0.806,0.244,-0.136,-0.838,0.359,-0.144,-0.896,0.423,-0.121,-0.934,0.407,-0.076,-0.931,0.385,-0.033,-0.907,0.375,-0.057,-0.888,0.374,-0.110,-0.878,0.364,-0.154,-0.861,0.327,-0.194,-0.843,0.301,-0.246,-0.833,0.316,-0.292,-0.821,0.324,-0.310,-0.847,0.318,-0.269,-0.867,0.290,-0.216,-0.875,0.263,-0.150,-0.893,0.233,-0.080,-0.915,0.219,-0.015,-0.951,0.224,0.042,-0.982,0.214,0.068,-1.001,0.219,0.074,-1.006,0.248,0.056,-0.984,0.268,0.030,-0.957,0.273,0.010,-0.949,0.276,0.007,-0.946,0.269,-0.001,-0.952,0.274,-0.002,-0.955,0.266,0.006,-0.960,0.241,0.014,-0.977,0.226,0.019,-0.987,0.228,0.015,-0.981,0.242,0.010,-0.976,0.244,0.004,-0.973,0.248,-0.007,-0.970,0.269,-0.018,-0.963,0.285,-0.028,-0.963,0.289,-0.029,-0.969,0.276,-0.008,-0.968,0.244,0.011,-0.961,0.223,0.028,-0.961,0.210,0.035,-0.963,0.212,0.022,-0.957,0.221,0.007,-0.953,0.230,0.005,-0.953,0.234,0.009,-0.969,0.244,0.011,-0.985,0.248,0.005,-0.985,0.256,-0.003,-0.980,0.253,-0.004,-0.969,0.245,-0.016,-0.963,0.254,-0.014,-0.964,0.263,-0.019,-0.961,0.267,-0.020,-0.967,0.252,-0.008,-0.967,0.233,0.001,-0.958,0.230,-0.002,-0.950,0.233,-0.021,-0.942,0.243,-0.038,-0.936,0.256,-0.040,-0.937,0.278,-0.041,-0.935,0.295,-0.036,-0.942,0.297,-0.018,-0.947,0.291,-0.018,-0.946,0.306,-0.031]

func preproc(_ rawdata: [Float]) -> [Float] {
    var datains : [Float] = []

    let n = rawdata.count / 3
    let nbins = 10
    let binsize = Int(Float(n) / Float(nbins) + 0.9)
    print(binsize)
    
    var databins : [Float] = []
    var onebin : [Float] = [0.0, 0.0, 0.0]
    var m : Float = 0
    
    for i in 0...n-1 {
        onebin[0] += rawdata[3 * i]
        onebin[1] += rawdata[3 * i+1]
        onebin[2] += rawdata[3 * i+2]
        m += 1
        
        if ((i+1) % binsize == 0 || i+1 >= n){
            if m > 0{
                onebin[0] /= m
                onebin[1] /= m
                onebin[2] /= m
                databins += onebin
            }
            onebin = [0, 0, 0]
            m = 0
        }
    }
    
    let l = databins.count/3
    if (l < nbins){
        databins += databins[l-3...l-1]
    }
    
    if (databins.count/3 < nbins) {
        return datains
    }
    
    datains += databins
    
    return datains
}

func classifyByRule(data : [Float]) -> Bool {
    var isTouching :Bool;
    if(data[18] <= -0.754) {
        isTouching = true;
    } else if(data[8] <= -1.257) {
        isTouching = true;
    } else {
        isTouching = false;
    }
    return isTouching;
}
